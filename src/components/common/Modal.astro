---
import Button from "./Button.astro";

interface Props {
  id: string;
  title: string;
  showClose?: boolean;
}

const { id, title, showClose = true } = Astro.props;
---

<div
  id={id}
  class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-all duration-300"
  role="dialog"
  aria-modal="true"
>
  <div
    class="bg-white rounded-lg w-full max-w-md mx-auto shadow-xl transform translate-y-4 transition-all duration-300"
  >
    <div class="flex items-center justify-between p-4 border-b">
      <h2 class="text-xl font-semibold text-gray-900">{title}</h2>
      {
        showClose && (
          <Button
            type="button"
            variant="secondary"
            size="sm"
            class="!p-1 !bg-transparent hover:!bg-gray-100"
            data-modal-close
            aria-label="Fermer"
          >
            <svg
              class="h-6 w-6 text-gray-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </Button>
        )
      }
    </div>

    <div class="p-4">
      <slot />
    </div>

    <div class="flex justify-end gap-3 p-4 border-t">
      <slot name="footer" />
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById(id);
    if (!modal) return;

    // Fonction pour ouvrir le modal avec animation
    function openModal() {
      modal.classList.remove("pointer-events-none", "opacity-0");
      modal.querySelector("div").classList.remove("translate-y-4");
    }

    // Fonction pour fermer le modal avec animation
    function closeModal() {
      modal.classList.add("opacity-0");
      modal.querySelector("div").classList.add("translate-y-4");
      setTimeout(() => {
        modal.classList.add("pointer-events-none");
      }, 300);
    }

    // Fermer avec le bouton
    const closeButton = modal.querySelector("[data-modal-close]");
    closeButton?.addEventListener("click", closeModal);

    // Fermer avec Escape
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        !modal.classList.contains("pointer-events-none")
      ) {
        closeModal();
      }
    });

    // Fermer en cliquant en dehors
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Exposer les fonctions globalement pour pouvoir les utiliser ailleurs
    window[`openModal_${id}`] = openModal;
    window[`closeModal_${id}`] = closeModal;
  });
</script>
