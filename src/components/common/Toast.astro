---
interface Props {
  id: string;
  type?: "success" | "error" | "info";
}

const { id, type = "info" } = Astro.props;

const typeStyles = {
  success: "bg-green-100 text-green-900 border-green-200",
  error: "bg-red-100 text-red-900 border-red-200",
  info: "bg-blue-100 text-blue-900 border-blue-200",
};
---

<div
  id={id}
  class={`fixed bottom-20 left-1/2 -translate-x-1/2 transform px-4 py-2 rounded-lg border shadow-lg opacity-0 transition-all duration-300 translate-y-2 pointer-events-none ${typeStyles[type]}`}
  role="alert"
>
  <slot />
</div>

<style>
  .show {
    opacity: 1 !important;
    transform: translateX(-50%) translateY(0) !important;
  }
</style>

<script define:vars={{ id }}>
  let timeoutId;

  function showToast(message, duration = 3000) {
    const toast = document.getElementById(id);
    if (!toast) return;

    toast.textContent = message;
    toast.classList.add("show");

    // Si un timeout précédent existe, on le nettoie
    if (timeoutId) clearTimeout(timeoutId);

    // Nouveau timeout pour cacher le toast
    timeoutId = setTimeout(() => {
      toast.classList.remove("show");
    }, duration);
  }

  // Exposer la fonction showToast globalement pour ce toast spécifique
  window[`showToast_${id}`] = showToast;
</script>
