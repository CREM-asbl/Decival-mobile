---
import { getLearningSpeed, getMasteredRulesTrend, getStreakTrend, getSuccessRateTrend } from '../../stores/rulesSummaryStore';
import type { RuleType } from '../../types/rules';

interface Props {
  type: RuleType;
  days?: number;
  showSuccessRate?: boolean;
  showStreaks?: boolean;
  showLearningSpeed?: boolean;
}

const {
  type,
  days = 30,
  showSuccessRate = true,
  showStreaks = true,
  showLearningSpeed = true
} = Astro.props;

// Récupérer les données de progression
const masteredTrend = getMasteredRulesTrend(type, days);
const successRateTrend = showSuccessRate ? getSuccessRateTrend(type, days) : [];
const streakTrend = showStreaks ? getStreakTrend(type, days) : [];
const learningSpeed = showLearningSpeed ? getLearningSpeed(type, 7, days) : [];

// Formater les dates pour l'affichage
const formatDateLabel = (date: Date) => {
  return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}`;
};

// Générer les labels pour l'axe X
const xLabels = masteredTrend.map(item => formatDateLabel(item.date));

// Déterminer le maximum pour l'échelle du graphique
const maxMastered = Math.max(...masteredTrend.map(item => item.value), 1);
const maxSuccessRate = showSuccessRate ? Math.max(...successRateTrend.map(item => item.value), 100) : 100;
const maxStreak = showStreaks ? Math.max(...streakTrend.map(item => item.value), 5) : 5;

// Calculer la hauteur du graphique
const graphHeight = 200;
const graphWidth = Math.max(xLabels.length * 40, 300);

// Générer le path pour les lignes du graphique
function generatePath(data: { date: Date; value: number }[], max: number): string {
  if (data.length === 0) return '';

  return data.map((item, index) => {
    const x = (index / (data.length - 1 || 1)) * graphWidth;
    const y = graphHeight - (item.value / max) * graphHeight;
    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;
  }).join(' ');
}

// Préparer les données pour le graphique
const masteredPath = generatePath(masteredTrend, maxMastered);
const successRatePath = showSuccessRate ? generatePath(successRateTrend, maxSuccessRate) : '';
const streakPath = showStreaks ? generatePath(streakTrend, maxStreak) : '';

// S'assurer qu'il y a des données à afficher
const hasData = masteredTrend.length > 0;
---

<div class="bg-white rounded-lg shadow-lg p-4 my-4">
  <h3 class="text-lg font-semibold mb-3">Progression sur {days} jours</h3>

  {hasData ? (
    <div>
      <div class="relative" style={`height: ${graphHeight}px; width: 100%`}>
        <!-- Grille de fond -->
        <svg class="absolute inset-0 w-full h-full" viewBox={`0 0 ${graphWidth} ${graphHeight}`}>
          {/* Lignes horizontales */}
          {Array.from({ length: 5 }).map((_, i) => (
            <line
              x1="0"
              y1={i * graphHeight / 4}
              x2={graphWidth}
              y2={i * graphHeight / 4}
              stroke="#e5e7eb"
              stroke-width="1"
            />
          ))}

          {/* Graphique de règles maîtrisées */}
          <path
            d={masteredPath}
            fill="none"
            stroke="#3b82f6"
            stroke-width="2"
          />

          {/* Graphique de taux de réussite */}
          {showSuccessRate && (
            <path
              d={successRatePath}
              fill="none"
              stroke="#10b981"
              stroke-width="2"
              stroke-dasharray="5,5"
            />
          )}

          {/* Graphique de séries */}
          {showStreaks && (
            <path
              d={streakPath}
              fill="none"
              stroke="#f59e0b"
              stroke-width="2"
              stroke-dasharray="3,3"
            />
          )}

          {/* Étiquettes des dates */}
          {xLabels.map((label, i) => {
            const x = (i / (xLabels.length - 1 || 1)) * graphWidth;
            return (
              <text
                x={x}
                y={graphHeight + 15}
                font-size="10"
                text-anchor="middle"
                fill="#6b7280"
              >{label}</text>
            );
          })}
        </svg>
      </div>

      <!-- Légende -->
      <div class="flex flex-wrap gap-4 mt-4 justify-center">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
          <span class="text-sm">Règles maîtrisées ({masteredTrend[masteredTrend.length - 1]?.value || 0})</span>
        </div>

        {showSuccessRate && (
          <div class="flex items-center gap-2">
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
            <span class="text-sm">Taux de réussite ({successRateTrend[successRateTrend.length - 1]?.value.toFixed(0) || 0}%)</span>
          </div>
        )}

        {showStreaks && (
          <div class="flex items-center gap-2">
            <div class="w-3 h-3 bg-amber-500 rounded-full"></div>
            <span class="text-sm">Série actuelle ({streakTrend[streakTrend.length - 1]?.value || 0})</span>
          </div>
        )}
      </div>

      {/* Vitesse d'apprentissage */}
      {showLearningSpeed && learningSpeed.length > 0 && (
        <div class="mt-6">
          <h4 class="text-md font-medium mb-2">Vitesse d'apprentissage</h4>
          <div class="grid grid-cols-2 gap-2 md:grid-cols-3 lg:grid-cols-4">
            {learningSpeed.map(period => (
              <div class="bg-gray-50 p-3 rounded-lg text-center">
                <div class="text-xs text-gray-500">{period.period}</div>
                <div class="text-xl font-bold text-accent mt-1">{period.newMastered}</div>
                <div class="text-xs">nouvelles règles</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  ) : (
    <div class="text-center py-8 text-gray-500">
      <p>Pas assez de données pour afficher la progression.</p>
      <p class="text-sm mt-2">Continuez à pratiquer pour voir votre évolution!</p>
    </div>
  )}
</div>