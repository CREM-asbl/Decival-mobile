---
import { validateRule } from "../../logic/ruleValidation";
import {
  updateRuleProgress,
  updateTypeStreak,
  getRuleProgress,
} from "../../stores/ruleProgressStore";
import { getRuleById } from "../../stores/rulesStore";
import type { RuleType } from "../../types/rules";

interface Props {
  id: string;
  answer: number;
  expectedAnswer: number;
  operationType: RuleType;
  details: {
    firstNumber: number;
    secondNumber: number;
  };
}

const { id, answer, expectedAnswer, operationType, details } = Astro.props;

const ruleId = `${operationType}-1`;
const validation = validateRule({
  ruleId,
  answer,
  expectedAnswer,
  details,
});

const rule = getRuleById(ruleId);
const progress = getRuleProgress(ruleId);

// Mettre √† jour la progression c√¥t√© client
if (typeof window !== "undefined") {
  updateRuleProgress(ruleId, validation.isValid);
  updateTypeStreak(operationType, validation.isValid);
}

// Choisir un message d'encouragement adapt√©
const encouragementMessages = {
  firstSuccess: "Continue comme √ßa !",
  maintainStreak: "Tu es sur la bonne voie !",
  breakStreak: "Ne te d√©courage pas, tu peux y arriver !",
  mastery: "Tu ma√Ætrises cette r√®gle !",
};

let encouragement = validation.isValid
  ? progress?.successCount === 1
    ? encouragementMessages.firstSuccess
    : encouragementMessages.maintainStreak
  : encouragementMessages.breakStreak;

if (progress?.mastered) {
  encouragement = encouragementMessages.mastery;
}
---

<div class="bg-white rounded-lg shadow-lg p-6 max-w-lg mx-auto">
  <div
    class={`text-center mb-4 ${validation.isValid ? "text-green-600" : "text-red-600"}`}
  >
    <h3 class="text-xl font-bold mb-2">
      {validation.isValid ? "‚ú® Bravo !" : "üòï Pas tout √† fait..."}
    </h3>
    <p>{validation.feedback}</p>
    <p class="text-sm mt-2 text-gray-600">{encouragement}</p>
  </div>

  {
    !validation.isValid && validation.suggestedStep && (
      <div class="bg-blue-50 p-4 rounded-lg mt-4">
        <p class="text-blue-800">
          <span class="font-semibold">Conseil :</span>{" "}
          {validation.suggestedStep}
        </p>
        {rule && (
          <div class="mt-3">
            <a
              href={`/rules/${operationType}#${ruleId}`}
              class="inline-flex items-center text-blue-600 hover:text-blue-800"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                />
              </svg>
              Revoir la r√®gle : {rule.title}
            </a>
          </div>
        )}
      </div>
    )
  }

  <div class="mt-6 text-center text-gray-600">
    <p>
      Votre r√©ponse : <span class="font-mono">{answer}</span>
      <br />
      La bonne r√©ponse : <span class="font-mono">{expectedAnswer}</span>
    </p>
  </div>

  {
    progress && (
      <div class="mt-6 p-4 bg-gray-50 rounded-lg">
        <div class="flex justify-between items-center mb-2">
          <span class="text-sm font-medium">Progression sur cette r√®gle :</span>
          <span class="text-sm">
            {progress.successCount}/
            {progress.successCount + progress.failureCount} r√©ussis
          </span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2">
          <div
            class="bg-accent h-2 rounded-full transition-all duration-300"
            style={`width: ${Math.round(
              (progress.successCount /
                (progress.successCount + progress.failureCount)) *
                100,
            )}%`}
          />
        </div>
      </div>
    )
  }
</div>

<script
  define:vars={{
    ruleId,
    operationType,
    validation: { isValid: validation.isValid },
  }}
>
  // Mise √† jour de la progression c√¥t√© client
  import {
    updateRuleProgress,
    updateTypeStreak,
  } from "../../stores/ruleProgressStore";

  if (ruleId && operationType) {
    updateRuleProgress(ruleId, validation.isValid);
    updateTypeStreak(operationType, validation.isValid);
  }
</script>
