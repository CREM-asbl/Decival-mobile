---
import { getRuleProgress } from "../../stores/ruleProgressStore";
import { validateAnswer } from "../../logic/validationLogic";
import RuleLink from "../rules/RuleLink.astro";

interface Props {
  id: string;
  answer: number | string;
  expectedAnswer: number | string;
  operationType: "addition" | "subtraction" | "multiplication" | "comparison";
  details?: {
    firstNumber: number;
    secondNumber: number;
  };
}

const { id, answer, expectedAnswer, operationType, details } = Astro.props;

const ruleId = `${operationType}-${id}`;
const progress = getRuleProgress(ruleId);
const validation = validateAnswer(answer, expectedAnswer, details);

const encouragementMessages = {
  firstSuccess: "Continue comme √ßa !",
  maintainStreak: "Tu es sur la bonne voie !",
  breakStreak: "Ne te d√©courage pas, tu peux y arriver !",
  mastery: "Tu ma√Ætrises cette r√®gle !",
};

let encouragement = validation.isValid
  ? progress?.successCount === 1
    ? encouragementMessages.firstSuccess
    : encouragementMessages.maintainStreak
  : encouragementMessages.breakStreak;

if (progress?.mastered) {
  encouragement = encouragementMessages.mastery;
}
---

<div class="transform-gpu">
  <div
    class={`bg-white rounded-lg shadow-lg p-6 max-w-lg mx-auto transition-all duration-500 ease-out ${
      validation.isValid ? "scale-100" : "scale-95"
    }`}
    data-result="true"
  >
    <div
      class={`text-center mb-4 transition-colors duration-300 ${
        validation.isValid ? "text-green-600" : "text-red-600"
      }`}
    >
      <h3 class="text-xl font-bold mb-2 flex items-center justify-center gap-2">
        {
          validation.isValid ? (
            <>
              <span class="animate-bounce">‚ú®</span>
              <span>Bravo !</span>
              <span class="animate-bounce">‚ú®</span>
            </>
          ) : (
            <>
              <span class="animate-pulse">üòï</span>
              <span>Pas tout √† fait...</span>
            </>
          )
        }
      </h3>
      <p>{validation.feedback}</p>
      <p class="text-base mt-4">
        Votre r√©ponse : <span class="font-mono">{answer}</span>
        <br />
        La bonne r√©ponse : <span class="font-mono">{expectedAnswer}</span>
      </p>
    </div>

    {
      progress && (
        <div class="mt-6 p-4 bg-gray-50 rounded-lg transform transition-all duration-500 hover:scale-102">
          <div class="flex justify-between items-center mb-2">
            <span class="text-sm font-medium">
              Progression sur cette r√®gle :
            </span>
            <span class="text-sm">
              {progress.successCount}/
              {progress.successCount + progress.failureCount} r√©ussis
            </span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
            <div
              class="bg-accent h-2 rounded-full transition-all duration-1000 ease-out"
              style={`width: ${Math.round(
                (progress.successCount /
                  (progress.successCount + progress.failureCount)) *
                  100,
              )}%`}
            />
          </div>
          <p class="text-sm mt-2 text-gray-600">{encouragement}</p>
        </div>
      )
    }

    {
      !validation.isValid && validation.suggestedStep && (
        <div class="bg-blue-50 p-4 rounded-lg mt-4 transform transition-all duration-500 hover:scale-102">
          <p class="text-blue-800">
            <span class="font-semibold">Conseil :</span>{" "}
            {validation.suggestedStep}
          </p>
          {operationType && (
            <div class="mt-3">
              <RuleLink type={operationType} />
            </div>
          )}
        </div>
      )
    }
  </div>
</div>

<script>
  import { playSound } from "../../stores/soundStore";

  // Jouer un son et ajouter une animation lors de l'affichage du r√©sultat
  document.addEventListener("DOMContentLoaded", () => {
    const resultElement = document.querySelector("[data-result]");
    if (!resultElement) return;

    const isValid = resultElement.querySelector(".text-green-600") !== null;
    playSound(isValid ? "correct" : "incorrect");

    // Ajouter une classe pour l'animation d'entr√©e
    resultElement.classList.add("animate-fade-in");
  });
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }

  .scale-102 {
    scale: 1.02;
  }
</style>
