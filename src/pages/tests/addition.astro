---
import Layout from "../../layouts/Layout.astro";
import TestNavigation from "../../components/tests/TestNavigation.astro";
import Button from "../../components/common/Button.astro";
import Modal from "../../components/common/Modal.astro";
import Toast from "../../components/common/Toast.astro";
import { createAdditionTest } from "../../logic/additionLogic";
import { startNewTest, completeTest } from "../../stores/testStore";

// Cr√©ation d'un test d'exemple
const test = createAdditionTest(5);
const currentItem = test.items[0];

// D√©marrer le test
startNewTest(test);
---

<Layout title="Test d'addition - Decival" currentPage="tests">
  <TestNavigation title="Test d'addition" />

  <div class="container mx-auto px-4 py-8 mt-16">
    <div class="mb-6">
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-600">
          Question <span id="currentQuestion">1</span>/<span id="totalQuestions"
            >{test.items.length}</span
          >
        </div>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
        <div
          class="bg-accent h-2 rounded-full"
          style="width: 20%"
          id="progressBar"
        >
        </div>
      </div>
    </div>

    <form id="testForm" class="mt-8">
      <div class="bg-white rounded-lg shadow-lg p-6 max-w-lg mx-auto">
        <div class="text-center mb-8">
          <div
            class="text-4xl font-bold mb-6 flex items-center justify-center gap-4"
          >
            <span id="firstNumber">{currentItem.firstNumber}</span>
            <span class="text-accent">+</span>
            <span id="secondNumber">{currentItem.secondNumber}</span>
          </div>

          <div class="w-full max-w-xs mx-auto">
            <div class="flex flex-col gap-1">
              <input
                type="number"
                name="answer"
                required
                min="0"
                max="999"
                class="w-full px-4 py-2 rounded-md border border-gray-300 text-center text-2xl focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent"
                inputmode="numeric"
                pattern="[0-9]*"
              />
            </div>
          </div>
        </div>

        <div class="flex justify-end gap-4">
          <Button type="submit" variant="primary" size="lg"> Suivant </Button>
        </div>
      </div>
    </form>
  </div>

  <Modal id="result-modal" title="R√©sultat">
    <div class="text-center py-4">
      <p class="text-xl mb-2">
        Votre r√©ponse est <span id="resultText" class="font-bold"></span>
      </p>
      <p class="text-gray-600">
        La bonne r√©ponse √©tait : <span id="correctAnswer" class="font-semibold"
        ></span>
      </p>
    </div>
    <div slot="footer" class="flex justify-end gap-3">
      <Button variant="primary" id="continueButton">Continuer</Button>
    </div>
  </Modal>

  <Modal id="test-complete-modal" title="Test termin√©">
    <div class="text-center py-4">
      <h3 class="text-xl font-bold mb-4">F√©licitations !</h3>
      <p class="mb-2">Vous avez termin√© le test d'addition.</p>
      <div class="text-lg">
        Score : <span id="finalScore" class="font-bold text-accent">0</span>%
      </div>
      <p class="mt-4 text-sm text-gray-600">
        Consultez vos progr√®s dans l'onglet "Progr√®s"
      </p>
    </div>
    <div slot="footer" class="flex justify-end gap-3">
      <a href="/tests" class="no-underline">
        <Button variant="secondary" data-modal-close>Fermer</Button>
      </a>
      <Button variant="primary" id="restartButton">Recommencer</Button>
    </div>
  </Modal>

  <Toast id="feedback-toast" />

  <audio id="correct-sound" preload="auto">
    <source src="/sounds/correct.mp3" type="audio/mpeg" />
  </audio>
  <audio id="incorrect-sound" preload="auto">
    <source src="/sounds/incorrect.mp3" type="audio/mpeg" />
  </audio>
</Layout>

<script>
  import {
    checkAnswer,
    createAdditionTest,
    evaluateTest,
  } from "../../logic/additionLogic";
  import { completeTest, currentTest } from "../../stores/testStore";

  // √âtat global
  let test = currentTest.get() || createAdditionTest(5);
  let currentQuestionIndex = 0;

  // √âl√©ments du DOM
  const form = document.getElementById("testForm");
  const firstNumberElement = document.getElementById("firstNumber");
  const secondNumberElement = document.getElementById("secondNumber");
  const resultModal = document.getElementById("result-modal");
  const testCompleteModal = document.getElementById("test-complete-modal");
  const currentQuestionElement = document.getElementById("currentQuestion");
  const progressBar = document.getElementById("progressBar");
  const continueButton = document.getElementById("continueButton");
  const restartButton = document.getElementById("restartButton");
  const correctSound = document.getElementById(
    "correct-sound",
  ) as HTMLAudioElement;
  const incorrectSound = document.getElementById(
    "incorrect-sound",
  ) as HTMLAudioElement;

  // Fonction pour afficher les toasts
  function showToast(message: string, duration: number = 2000) {
    if (typeof window.showToast_feedback === "function") {
      window.showToast_feedback(message, duration);
    }
  }

  /**
   * Met √† jour l'affichage de la progression
   */
  function updateProgressDisplay() {
    if (currentQuestionElement) {
      currentQuestionElement.textContent = (
        currentQuestionIndex + 1
      ).toString();
    }
    if (progressBar) {
      const progress = ((currentQuestionIndex + 1) / test.items.length) * 100;
      progressBar.style.width = `${progress}%`;

      // Ajouter un log pour d√©boguer
      console.log(
        `Question: ${currentQuestionIndex + 1}, Progression: ${progress}%`,
      );
    }
  }

  /**
   * Joue un son en fonction du r√©sultat de la r√©ponse
   */
  function playSound(isCorrect) {
    const sound = isCorrect ? correctSound : incorrectSound;
    if (sound) {
      sound.currentTime = 0;
      sound
        .play()
        .catch((err) => console.log("Erreur lors de la lecture du son:", err));
    }
  }

  /**
   * Affiche la modal de r√©sultat
   */
  function showResult(isCorrect, userAnswer, correctAnswer) {
    const resultText = document.getElementById("resultText");
    const correctAnswerElement = document.getElementById("correctAnswer");

    if (resultText) {
      resultText.textContent = isCorrect ? "correcte !" : "incorrecte";
      resultText.className = `font-bold ${
        isCorrect ? "text-green-600" : "text-red-600"
      }`;
    }
    if (correctAnswerElement) {
      correctAnswerElement.textContent = correctAnswer.toString();
    }

    // Jouer le son et afficher le toast
    playSound(isCorrect);
    showToast(
      isCorrect ? "‚ú® Bravo ! C'est correct !" : "üòï Pas tout √† fait...",
      2000,
    );

    // Utiliser la fonction openModal avec le bon ID
    if (typeof window[`openModal_result-modal`] === "function") {
      window[`openModal_result-modal`]();
    }
  }

  /**
   * Affiche la modal de fin de test
   */
  function showTestComplete() {
    const results = evaluateTest(test);
    const finalScoreElement = document.getElementById("finalScore");
    if (finalScoreElement) {
      finalScoreElement.textContent = Math.round(results.score).toString();
    }

    // Sauvegarder le test termin√©
    test.endTime = new Date();
    test.status = "completed";
    completeTest(test);

    // Utiliser la fonction openModal avec le bon ID
    if (typeof window[`openModal_test-complete-modal`] === "function") {
      window[`openModal_test-complete-modal`]();
    }
    showToast(`üéâ Test termin√© ! Score : ${Math.round(results.score)}%`, 4000);
  }

  /**
   * Met √† jour l'affichage de la question courante
   */
  function updateQuestion() {
    const currentItem = test.items[currentQuestionIndex];
    if (firstNumberElement && secondNumberElement) {
      firstNumberElement.textContent = currentItem.firstNumber.toString();
      secondNumberElement.textContent = currentItem.secondNumber.toString();
    }

    // Focus sur l'input
    const input = document.querySelector(
      "input[name='answer']",
    ) as HTMLInputElement;
    if (input) {
      input.value = "";
      input.focus();
    }
  }

  // Gestionnaire de soumission du formulaire
  if (form) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const answer = parseInt(formData.get("answer") as string);

      if (isNaN(answer)) {
        showToast("Veuillez entrer une r√©ponse valide", 2000);
        return;
      }

      const currentItem = test.items[currentQuestionIndex];
      const isCorrect = checkAnswer(currentItem, answer);

      // Mise √† jour de l'item
      currentItem.userAnswer = answer;
      currentItem.isCorrect = isCorrect;

      showResult(isCorrect, answer, currentItem.correctAnswer);
    });
  }

  // Gestionnaire du bouton Continuer
  if (continueButton) {
    continueButton.addEventListener("click", () => {
      // Utiliser la fonction closeModal avec le bon ID
      if (typeof window[`closeModal_result-modal`] === "function") {
        window[`closeModal_result-modal`]();
      }

      // Incr√©menter l'index apr√®s avoir valid√© la r√©ponse et ferm√© la modal
      currentQuestionIndex++;

      if (currentQuestionIndex >= test.items.length) {
        showTestComplete();
      } else {
        updateProgressDisplay(); // Mettre √† jour l'affichage de la progression
        updateQuestion();
      }
    });
  }

  // Gestionnaire du bouton Recommencer
  if (restartButton) {
    restartButton.addEventListener("click", () => {
      test = createAdditionTest(5);
      currentQuestionIndex = 0;
      updateProgressDisplay();
      updateQuestion();
      if (typeof window[`closeModal_test-complete-modal`] === "function") {
        window[`closeModal_test-complete-modal`]();
      }
      showToast("üîÑ Nouveau test commenc√© !", 2000);
    });
  }

  // Focus sur l'input au chargement
  window.addEventListener("load", () => {
    const input = document.querySelector(
      "input[name='answer']",
    ) as HTMLInputElement;
    if (input) {
      input.focus();
    }
  });

  // Initialisation
  updateProgressDisplay(); // S'assurer que la progression est correctement initialis√©e
</script>
